{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ini.h Overview ini.h is a header-only library for reading and writing INI files in C++ through a simple, intuitive API. Prerequisites ini.h is only compatible with C++17 or higher. Usage Reading and Writing Reading an INI file There are two ways to read and parse the contents of an INI file: Through a file path Through a file stream File Path File Stream main.cpp 1 2 3 4 5 6 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); } main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); // You are responsible for closing the file stream. stream . close (); } Close the File Stream Don't forget to close the file stream. You are responsible for closing it. Writing to an INI File main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file . add_section ( \"New Section\" ); file [ \"New Section\" ][ \"is_generic_key\" ] = \"true\" ; file . write ( \"path/to/ini/example.ini\" ); } Getting and Setting Values Getting Values main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); std :: string title = file [ \"FileInfo\" ][ \"title\" ]; bool auto_save_enabled = file [ \"FileInfo\" ]. get < bool > ( \"autoSaveEnabled\" ) : size_t word_count = file [ \"FileInfo\" ]. get < size_t > ( \"wordCount\" ); double line_spacing = file [ \"FileInfo\" ]. get < double > ( \"lineSpacing\" ); } 1 2 3 4 5 6 7 [FileInfo] title = On the topic of C++ author = John Appleseed lastDateOpened = 2022-07-24 autoSaveEnabled = true wordCount = 0 lineSpacing = 1.5 Setting Values main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file [ \"FileInfo\" ][ \"title\" ] = \"On the topic of C#\" ; file [ \"FileInfo\" ]. set < bool > ( \"autoSaveEnabled\" , false ); file [ \"FileInfo\" ]. set < size_t > ( \"wordCount\" , 1 ); file [ \"FileInfo\" ]. set < double > ( \"lineSpacing\" , 2.0 ); } 1 2 3 4 5 6 7 [FileInfo] title = On the topic of C++ author = John Appleseed lastDateOpened = 2022-07-24 autoSaveEnabled = true wordCount = 0 lineSpacing = 1.5 Features List of Features Comments ; comment text # comment text Note Comments must start at the beginning of a line. Case Sensitivity Note Section names and keys are case-sensitive. Example 1 2 3 4 5 6 7 [SECTION] key = value KEY = value [section] key = value KEY = value Delimiters : = : Example [Section] key1 = value key2 : value Supported Value Types : int float double size_t std::size_t std::string","title":"Home"},{"location":"#inih","text":"","title":"ini.h"},{"location":"#overview","text":"ini.h is a header-only library for reading and writing INI files in C++ through a simple, intuitive API. Prerequisites ini.h is only compatible with C++17 or higher.","title":"Overview"},{"location":"#usage","text":"","title":"Usage"},{"location":"#reading-and-writing","text":"Reading an INI file There are two ways to read and parse the contents of an INI file: Through a file path Through a file stream File Path File Stream main.cpp 1 2 3 4 5 6 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); } main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); // You are responsible for closing the file stream. stream . close (); } Close the File Stream Don't forget to close the file stream. You are responsible for closing it. Writing to an INI File main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file . add_section ( \"New Section\" ); file [ \"New Section\" ][ \"is_generic_key\" ] = \"true\" ; file . write ( \"path/to/ini/example.ini\" ); }","title":"Reading and Writing"},{"location":"#getting-and-setting-values","text":"Getting Values main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); std :: string title = file [ \"FileInfo\" ][ \"title\" ]; bool auto_save_enabled = file [ \"FileInfo\" ]. get < bool > ( \"autoSaveEnabled\" ) : size_t word_count = file [ \"FileInfo\" ]. get < size_t > ( \"wordCount\" ); double line_spacing = file [ \"FileInfo\" ]. get < double > ( \"lineSpacing\" ); } 1 2 3 4 5 6 7 [FileInfo] title = On the topic of C++ author = John Appleseed lastDateOpened = 2022-07-24 autoSaveEnabled = true wordCount = 0 lineSpacing = 1.5 Setting Values main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file [ \"FileInfo\" ][ \"title\" ] = \"On the topic of C#\" ; file [ \"FileInfo\" ]. set < bool > ( \"autoSaveEnabled\" , false ); file [ \"FileInfo\" ]. set < size_t > ( \"wordCount\" , 1 ); file [ \"FileInfo\" ]. set < double > ( \"lineSpacing\" , 2.0 ); } 1 2 3 4 5 6 7 [FileInfo] title = On the topic of C++ author = John Appleseed lastDateOpened = 2022-07-24 autoSaveEnabled = true wordCount = 0 lineSpacing = 1.5","title":"Getting and Setting Values"},{"location":"#features","text":"List of Features Comments ; comment text # comment text Note Comments must start at the beginning of a line. Case Sensitivity Note Section names and keys are case-sensitive. Example 1 2 3 4 5 6 7 [SECTION] key = value KEY = value [section] key = value KEY = value Delimiters : = : Example [Section] key1 = value key2 : value Supported Value Types : int float double size_t std::size_t std::string","title":"Features"},{"location":"api/ini_namespace/","text":"ini Namespace Contains fundamental classes that represent the structure of an INI file and functions for reading INI files or strings containing valid INI input and for writing INI files. Classes Name Description File Represents an INI file. Section Represents the section of an INI file. Functions Name Description load(std::ifstream&) Reads and deserializes an input stream of an INI file line by line and returns a File object. load(const std::string&) Reads and deserializes a string and returns a File object. open(const std::filesystem::path&) Opens, reads, and deserializes an INI file and returns a File object.","title":"ini"},{"location":"api/ini_namespace/#ini-namespace","text":"Contains fundamental classes that represent the structure of an INI file and functions for reading INI files or strings containing valid INI input and for writing INI files.","title":"ini Namespace"},{"location":"api/ini_namespace/#classes","text":"Name Description File Represents an INI file. Section Represents the section of an INI file.","title":"Classes"},{"location":"api/ini_namespace/#functions","text":"Name Description load(std::ifstream&) Reads and deserializes an input stream of an INI file line by line and returns a File object. load(const std::string&) Reads and deserializes a string and returns a File object. open(const std::filesystem::path&) Opens, reads, and deserializes an INI file and returns a File object.","title":"Functions"},{"location":"api/load/","text":"ini::load Function Definition Namespace: ini Overloads Name Description load(std::ifstream&) Reads and deserializes an input stream of an INI file line by line and returns a File object. load(const std::string&) Reads and deserializes a string and returns a File object. load(std::ifstream&) Reads and deserializes an input stream of an INI file line by line and returns a File object. load(std::ifstream&) inline File load ( std :: ifstream & stream ) Parameters stream std::ifstream The input file stream of an INI file. Returns File A File object. Exceptions std::invalid_argument stream is closed. -or- The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section. Examples The following example demonstrates how to read an INI file using a file stream. main.cpp 1 2 3 4 5 6 7 8 9 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close (); } Remarks The caller is responsible for closing stream . load(const std::string&) load(const std::string&) inline File load ( const std :: string & text ) Parameters text std::string A string that contains an INI-like structure. Returns File A File object. Exceptions std::invalid_argument The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section. Examples The following example demonstrates how to read a string . main.cpp 1 2 3 4 5 6 7 8 #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { std :: string text = \"[Settings] \\n runAtStartup = true \\n isAutoSaveEnabled = false \\n [Random] \\n hello = world \\n pi = 3.14 \\n sentence = This is a long sentence; unfortunately, newlines don't work in values when the input is a string instead of an input stream :(\" ; ini :: File file = ini :: load ( text ); } Remarks text will break the deserialization process if it contains newlines in the values. For example, a string that resembles the following will be problematic: [Section Header] genericKey = This is the first line\\nThis is the second line\\nThis is the third line The newlines in the value that corresponds to \"genericKey\" will cause an issue for the algorithm responsible for parsing INI files. This is only the case for this overload of the load function.","title":"load"},{"location":"api/load/#iniload-function","text":"","title":"ini::load Function"},{"location":"api/load/#definition","text":"Namespace: ini","title":"Definition"},{"location":"api/load/#overloads","text":"Name Description load(std::ifstream&) Reads and deserializes an input stream of an INI file line by line and returns a File object. load(const std::string&) Reads and deserializes a string and returns a File object.","title":"Overloads"},{"location":"api/load/#loadstdifstream","text":"Reads and deserializes an input stream of an INI file line by line and returns a File object. load(std::ifstream&) inline File load ( std :: ifstream & stream )","title":"load(std::ifstream&amp;)"},{"location":"api/load/#parameters","text":"stream std::ifstream The input file stream of an INI file.","title":"Parameters"},{"location":"api/load/#returns","text":"File A File object.","title":"Returns"},{"location":"api/load/#exceptions","text":"std::invalid_argument stream is closed. -or- The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section.","title":"Exceptions"},{"location":"api/load/#examples","text":"The following example demonstrates how to read an INI file using a file stream. main.cpp 1 2 3 4 5 6 7 8 9 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close (); }","title":"Examples"},{"location":"api/load/#remarks","text":"The caller is responsible for closing stream .","title":"Remarks"},{"location":"api/load/#loadconst-stdstring","text":"load(const std::string&) inline File load ( const std :: string & text )","title":"load(const std::string&amp;)"},{"location":"api/load/#parameters_1","text":"text std::string A string that contains an INI-like structure.","title":"Parameters"},{"location":"api/load/#returns_1","text":"File A File object.","title":"Returns"},{"location":"api/load/#exceptions_1","text":"std::invalid_argument The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section.","title":"Exceptions"},{"location":"api/load/#examples_1","text":"The following example demonstrates how to read a string . main.cpp 1 2 3 4 5 6 7 8 #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { std :: string text = \"[Settings] \\n runAtStartup = true \\n isAutoSaveEnabled = false \\n [Random] \\n hello = world \\n pi = 3.14 \\n sentence = This is a long sentence; unfortunately, newlines don't work in values when the input is a string instead of an input stream :(\" ; ini :: File file = ini :: load ( text ); }","title":"Examples"},{"location":"api/load/#remarks_1","text":"text will break the deserialization process if it contains newlines in the values. For example, a string that resembles the following will be problematic: [Section Header] genericKey = This is the first line\\nThis is the second line\\nThis is the third line The newlines in the value that corresponds to \"genericKey\" will cause an issue for the algorithm responsible for parsing INI files. This is only the case for this overload of the load function.","title":"Remarks"},{"location":"api/open/","text":"ini::open Function Definition Namespace: ini Opens, reads, and deserializes an INI file and returns a File object. open(const std::filesystem::path&) Opens, reads, and deserializes an INI file and returns a File object. open(const std::filesystem::path&) inline File open ( const std :: filesystem :: path & path ) Parameters path std::filesystem::path The path to an INI file. Returns File A File object. Exceptions std::invalid_argument The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section. Examples The following example demonstrates how to read an INI file through a file path. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <filesystem> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { // Explicitly through a std::filesystem::path std :: filesystem :: path path ( \"path/to/ini/example1.ini\" ); ini :: File file1 = ini :: open ( path ); // Implicitly through a std::string ini :: File file2 = ini :: open ( \"path/to/ini/example2.ini\" ); }","title":"open"},{"location":"api/open/#iniopen-function","text":"","title":"ini::open Function"},{"location":"api/open/#definition","text":"Namespace: ini Opens, reads, and deserializes an INI file and returns a File object.","title":"Definition"},{"location":"api/open/#openconst-stdfilesystempath","text":"Opens, reads, and deserializes an INI file and returns a File object. open(const std::filesystem::path&) inline File open ( const std :: filesystem :: path & path )","title":"open(const std::filesystem::path&amp;)"},{"location":"api/open/#parameters","text":"path std::filesystem::path The path to an INI file.","title":"Parameters"},{"location":"api/open/#returns","text":"File A File object.","title":"Returns"},{"location":"api/open/#exceptions","text":"std::invalid_argument The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section.","title":"Exceptions"},{"location":"api/open/#examples","text":"The following example demonstrates how to read an INI file through a file path. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <filesystem> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { // Explicitly through a std::filesystem::path std :: filesystem :: path path ( \"path/to/ini/example1.ini\" ); ini :: File file1 = ini :: open ( path ); // Implicitly through a std::string ini :: File file2 = ini :: open ( \"path/to/ini/example2.ini\" ); }","title":"Examples"},{"location":"api/file/constructors/","text":"File Constructors Definition Namespace: ini Initializes an instance of the File class. Overloads Constructor Description File() Initializes an instance of the File class. File(std::ifstream&) Initializes an instance of the File class and reads and deserializes an input file stream. File(const std::string&) Initializes an instance of the File class and deserializes a string . Remarks These constructors are not intended to be used directly by the caller. The caller should rely on the load and open functions instead. File() Initializes an instance of the File class. File() inline File :: File () File(std::ifstream&) Initializes an instance of the File class and reads and deserializes an input file stream. File(std::ifstream&) inline File :: File ( std :: ifstream & stream ) Parameters stream std::ifstream The input file stream of an INI file. Exceptions std::invalid_argument stream is closed. -or- The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section. File(const std::string&) Initializes an instance of the File class and deserializes a string . File(const std::string&) inline File :: File ( const std :: string & text ) Parameters text std::string A string that contains an INI-like structure. Exceptions std::invalid_argument The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section.","title":"Constructors"},{"location":"api/file/constructors/#file-constructors","text":"","title":"File Constructors"},{"location":"api/file/constructors/#definition","text":"Namespace: ini Initializes an instance of the File class.","title":"Definition"},{"location":"api/file/constructors/#overloads","text":"Constructor Description File() Initializes an instance of the File class. File(std::ifstream&) Initializes an instance of the File class and reads and deserializes an input file stream. File(const std::string&) Initializes an instance of the File class and deserializes a string .","title":"Overloads"},{"location":"api/file/constructors/#remarks","text":"These constructors are not intended to be used directly by the caller. The caller should rely on the load and open functions instead.","title":"Remarks"},{"location":"api/file/constructors/#file","text":"Initializes an instance of the File class. File() inline File :: File ()","title":"File()"},{"location":"api/file/constructors/#filestdifstream","text":"Initializes an instance of the File class and reads and deserializes an input file stream. File(std::ifstream&) inline File :: File ( std :: ifstream & stream )","title":"File(std::ifstream&amp;)"},{"location":"api/file/constructors/#parameters","text":"stream std::ifstream The input file stream of an INI file.","title":"Parameters"},{"location":"api/file/constructors/#exceptions","text":"std::invalid_argument stream is closed. -or- The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section.","title":"Exceptions"},{"location":"api/file/constructors/#fileconst-stdstring","text":"Initializes an instance of the File class and deserializes a string . File(const std::string&) inline File :: File ( const std :: string & text )","title":"File(const std::string&amp;)"},{"location":"api/file/constructors/#parameters_1","text":"text std::string A string that contains an INI-like structure.","title":"Parameters"},{"location":"api/file/constructors/#exceptions_1","text":"std::invalid_argument The INI file is missing a section header. -or- The INI file contains an empty section header. -or- The INI file contains duplicate keys in a section.","title":"Exceptions"},{"location":"api/file/file/","text":"File Class Definition Namespace: ini Represents an INI file. File class class File Constructors Constructor Description File() Initializes an instance of the File class. File(std::ifstream&) Initializes an instance of the File class and reads and deserializes an input file stream. File(const std::string&) Initializes an instance of the File class and deserializes a string . Functions Name Description add_section(const std::string&) Adds a section to the File instance. clear() Removes all sections from the File instance. empty() Indicates whether the File instance contains no sections. has_section(const std::string&) Indicates whether the File instance contains a specified section. remove_section(const std::string&) Removes the specified section from the File instance. rename_section(const std::string&, const std::string&) Renames the specified section in the File instance. size() Returns the number of sections in the File instance. write(const std::filesystem::path&) Serializes the File instance and writes it to the specified file path. Operators Name Description operator[] Gets or sets a section that corresponds to the specified section name.","title":"File"},{"location":"api/file/file/#file-class","text":"","title":"File Class"},{"location":"api/file/file/#definition","text":"Namespace: ini Represents an INI file. File class class File","title":"Definition"},{"location":"api/file/file/#constructors","text":"Constructor Description File() Initializes an instance of the File class. File(std::ifstream&) Initializes an instance of the File class and reads and deserializes an input file stream. File(const std::string&) Initializes an instance of the File class and deserializes a string .","title":"Constructors"},{"location":"api/file/file/#functions","text":"Name Description add_section(const std::string&) Adds a section to the File instance. clear() Removes all sections from the File instance. empty() Indicates whether the File instance contains no sections. has_section(const std::string&) Indicates whether the File instance contains a specified section. remove_section(const std::string&) Removes the specified section from the File instance. rename_section(const std::string&, const std::string&) Renames the specified section in the File instance. size() Returns the number of sections in the File instance. write(const std::filesystem::path&) Serializes the File instance and writes it to the specified file path.","title":"Functions"},{"location":"api/file/file/#operators","text":"Name Description operator[] Gets or sets a section that corresponds to the specified section name.","title":"Operators"},{"location":"api/file/functions/add_section/","text":"File::add_section Function Definition Namespace: ini Adds a section to the File instance. add_section(const std::string&) Adds a section to the File instance. add_section(const std::string&) inline void File :: add_section ( const std :: string & section_name ) Parameters section_name std::string The name of the section that will be added. Exceptions std::invalid_argument section_name already exists. Examples The following example demonstrates how to add a section to a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file . add_section ( \"New Section\" ); // Now we can retrieve an instance of the newly created section. ini :: Section & section = file [ \"New Section\" ]; }","title":"add_section"},{"location":"api/file/functions/add_section/#fileadd_section-function","text":"","title":"File::add_section Function"},{"location":"api/file/functions/add_section/#definition","text":"Namespace: ini Adds a section to the File instance.","title":"Definition"},{"location":"api/file/functions/add_section/#add_sectionconst-stdstring","text":"Adds a section to the File instance. add_section(const std::string&) inline void File :: add_section ( const std :: string & section_name )","title":"add_section(const std::string&amp;)"},{"location":"api/file/functions/add_section/#parameters","text":"section_name std::string The name of the section that will be added.","title":"Parameters"},{"location":"api/file/functions/add_section/#exceptions","text":"std::invalid_argument section_name already exists.","title":"Exceptions"},{"location":"api/file/functions/add_section/#examples","text":"The following example demonstrates how to add a section to a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file . add_section ( \"New Section\" ); // Now we can retrieve an instance of the newly created section. ini :: Section & section = file [ \"New Section\" ]; }","title":"Examples"},{"location":"api/file/functions/clear/","text":"File::clear Function Definition Namespace: ini Removes all sections from the File instance. clear() Removes all sections from the File instance. clear() inline void File :: clear () noexcept Examples The following example demonstrates how to remove all sections from a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close (); file . clear (); }","title":"clear"},{"location":"api/file/functions/clear/#fileclear-function","text":"","title":"File::clear Function"},{"location":"api/file/functions/clear/#definition","text":"Namespace: ini Removes all sections from the File instance.","title":"Definition"},{"location":"api/file/functions/clear/#clear","text":"Removes all sections from the File instance. clear() inline void File :: clear () noexcept","title":"clear()"},{"location":"api/file/functions/clear/#examples","text":"The following example demonstrates how to remove all sections from a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close (); file . clear (); }","title":"Examples"},{"location":"api/file/functions/empty/","text":"File::empty Function Definition Namespace: ini Indicates whether the File instance contains no sections. empty() Indicates whether the File instance contains no sections. empty() inline bool File :: empty () const noexcept Returns bool true if the File instance doesn't contain any sections; otherwise, false . Examples The following example demonstrates how to determine if a File instance is empty. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); bool isEmpty = file . empty (); if ( isEmpty ) { std :: cout << \"example.ini doesn't have any sections\" << std :: endl ; } else { std :: cout << \"example.ini isn't empty\" << std :: endl ; } }","title":"empty"},{"location":"api/file/functions/empty/#fileempty-function","text":"","title":"File::empty Function"},{"location":"api/file/functions/empty/#definition","text":"Namespace: ini Indicates whether the File instance contains no sections.","title":"Definition"},{"location":"api/file/functions/empty/#empty","text":"Indicates whether the File instance contains no sections. empty() inline bool File :: empty () const noexcept","title":"empty()"},{"location":"api/file/functions/empty/#returns","text":"bool true if the File instance doesn't contain any sections; otherwise, false .","title":"Returns"},{"location":"api/file/functions/empty/#examples","text":"The following example demonstrates how to determine if a File instance is empty. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); bool isEmpty = file . empty (); if ( isEmpty ) { std :: cout << \"example.ini doesn't have any sections\" << std :: endl ; } else { std :: cout << \"example.ini isn't empty\" << std :: endl ; } }","title":"Examples"},{"location":"api/file/functions/has_section/","text":"File::has_section Function Definition Namespace: ini Indicates whether the File instance contains a specified section. has_section(const std::string&) Indicates whether the File instance contains a specified section. has_section(const std::string&) inline bool File :: has_section ( const std :: string & section_name ) const Parameters section_name std::string The name of a section. Returns bool true if section_name was found; otherwise, false . Examples The following example demonstrates how to determine if a File contains a section name. main.cpp 1 2 3 4 5 6 7 8 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); bool contains_section_name = file . has_section ( \"Settings\" ); std :: cout << \"Section name exists: \" << contains_section_name << std :: endl ; }","title":"has_section"},{"location":"api/file/functions/has_section/#filehas_section-function","text":"","title":"File::has_section Function"},{"location":"api/file/functions/has_section/#definition","text":"Namespace: ini Indicates whether the File instance contains a specified section.","title":"Definition"},{"location":"api/file/functions/has_section/#has_sectionconst-stdstring","text":"Indicates whether the File instance contains a specified section. has_section(const std::string&) inline bool File :: has_section ( const std :: string & section_name ) const","title":"has_section(const std::string&amp;)"},{"location":"api/file/functions/has_section/#parameters","text":"section_name std::string The name of a section.","title":"Parameters"},{"location":"api/file/functions/has_section/#returns","text":"bool true if section_name was found; otherwise, false .","title":"Returns"},{"location":"api/file/functions/has_section/#examples","text":"The following example demonstrates how to determine if a File contains a section name. main.cpp 1 2 3 4 5 6 7 8 #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); bool contains_section_name = file . has_section ( \"Settings\" ); std :: cout << \"Section name exists: \" << contains_section_name << std :: endl ; }","title":"Examples"},{"location":"api/file/functions/remove_section/","text":"File::remove_section Function Definition Namespace: ini Removes the specified section from the File instance. remove_section(const std::string&) Removes the specified section from the File instance. remove_section(const std::string&) inline size_t File :: remove_section ( const std :: string & section_name ) Parameters section_name std::string The name of the section to remove. Returns size_t The number of sections removed. Exceptions std::invalid_argument section_name is empty. -or- section_name doesn't exist. Examples The following example demonstrates how to remove a section from a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close (); try { size_t num = file . remove_section ( \"Foo\" ); } catch ( std :: invalid_argument ) { // Handle exception. } }","title":"remove_section"},{"location":"api/file/functions/remove_section/#fileremove_section-function","text":"","title":"File::remove_section Function"},{"location":"api/file/functions/remove_section/#definition","text":"Namespace: ini Removes the specified section from the File instance.","title":"Definition"},{"location":"api/file/functions/remove_section/#remove_sectionconst-stdstring","text":"Removes the specified section from the File instance. remove_section(const std::string&) inline size_t File :: remove_section ( const std :: string & section_name )","title":"remove_section(const std::string&amp;)"},{"location":"api/file/functions/remove_section/#parameters","text":"section_name std::string The name of the section to remove.","title":"Parameters"},{"location":"api/file/functions/remove_section/#returns","text":"size_t The number of sections removed.","title":"Returns"},{"location":"api/file/functions/remove_section/#exceptions","text":"std::invalid_argument section_name is empty. -or- section_name doesn't exist.","title":"Exceptions"},{"location":"api/file/functions/remove_section/#examples","text":"The following example demonstrates how to remove a section from a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close (); try { size_t num = file . remove_section ( \"Foo\" ); } catch ( std :: invalid_argument ) { // Handle exception. } }","title":"Examples"},{"location":"api/file/functions/rename_section/","text":"File::rename_section Function Definition Namespace: ini Renames the specified section in the File instance. rename_section(const std::string&, const std::string&) Renames the specified section in the File instance. rename_section(const std::string&, const std::string&) inline void File :: rename_section ( const std :: string & old_section_name , const std :: string & new_section_name ) Parameters old_section_name std::string The name of the section whose name will be changed. new_section_name std::string The new name for the section. Exceptions std::invalid_argument old_section_name or new_section_name is empty. -or- old_section_name doesn't exist. -or- new_section_name already exists. Examples The following example demonstrates how to change the name of a section of a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file . add_section ( \"Foo\" ); ini :: Section & section = file [ \"Foo\" ]; section [ \"key\" ] = \"value\" ; // ... file . rename_section ( \"Foo\" , \"Bar\" ); std :: cout << file . has_section ( \"Foo\" ) << std :: endl ; // 0 std :: cout << file . has_section ( \"Bar\" ) << std :: endl ; // 1 std :: cout << file [ \"Bar\" ][ \"key\" ] << std :: endl ; // value }","title":"rename_section"},{"location":"api/file/functions/rename_section/#filerename_section-function","text":"","title":"File::rename_section Function"},{"location":"api/file/functions/rename_section/#definition","text":"Namespace: ini Renames the specified section in the File instance.","title":"Definition"},{"location":"api/file/functions/rename_section/#rename_sectionconst-stdstring-const-stdstring","text":"Renames the specified section in the File instance. rename_section(const std::string&, const std::string&) inline void File :: rename_section ( const std :: string & old_section_name , const std :: string & new_section_name )","title":"rename_section(const std::string&amp;, const std::string&amp;)"},{"location":"api/file/functions/rename_section/#parameters","text":"old_section_name std::string The name of the section whose name will be changed. new_section_name std::string The new name for the section.","title":"Parameters"},{"location":"api/file/functions/rename_section/#exceptions","text":"std::invalid_argument old_section_name or new_section_name is empty. -or- old_section_name doesn't exist. -or- new_section_name already exists.","title":"Exceptions"},{"location":"api/file/functions/rename_section/#examples","text":"The following example demonstrates how to change the name of a section of a File instance. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); file . add_section ( \"Foo\" ); ini :: Section & section = file [ \"Foo\" ]; section [ \"key\" ] = \"value\" ; // ... file . rename_section ( \"Foo\" , \"Bar\" ); std :: cout << file . has_section ( \"Foo\" ) << std :: endl ; // 0 std :: cout << file . has_section ( \"Bar\" ) << std :: endl ; // 1 std :: cout << file [ \"Bar\" ][ \"key\" ] << std :: endl ; // value }","title":"Examples"},{"location":"api/file/functions/size/","text":"File::size Function Definition Namespace: ini Returns the number of sections in the File instance. size() Returns the number of sections in the File instance. size() inline size_t File :: size () const noexcept Returns size_t The number of sections in the File instance. Examples The following example demonstrates how to retrieve the number of sections in a File instance. main.cpp 1 2 3 4 5 6 7 8 9 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); size_t count = file . size (); std :: cout << \"Count: \" << count << std :: endl ; }","title":"size"},{"location":"api/file/functions/size/#filesize-function","text":"","title":"File::size Function"},{"location":"api/file/functions/size/#definition","text":"Namespace: ini Returns the number of sections in the File instance.","title":"Definition"},{"location":"api/file/functions/size/#size","text":"Returns the number of sections in the File instance. size() inline size_t File :: size () const noexcept","title":"size()"},{"location":"api/file/functions/size/#returns","text":"size_t The number of sections in the File instance.","title":"Returns"},{"location":"api/file/functions/size/#examples","text":"The following example demonstrates how to retrieve the number of sections in a File instance. main.cpp 1 2 3 4 5 6 7 8 9 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"path/to/ini/example.ini\" ); size_t count = file . size (); std :: cout << \"Count: \" << count << std :: endl ; }","title":"Examples"},{"location":"api/file/functions/write/","text":"File::write Function Definition Namespace: ini Serializes the File instance and writes it to the specified file path. write(const std::filesystem::path&) Serializes the File instance and writes it to the specified file path. write(const std::filesystem::path&) inline void File :: write ( const std :: filesystem :: path & path ) const Parameters path std::filesystem::path The destination path. Examples The following example demonstrates how to serialize a File instance and write it to a file. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close () ini :: Section & section = file [ \"Foo\" ]; section [ \"key1\" ] = \"value1\" ; section [ \"key2\" ] = \"value2\" ; file . write ( \"path/to/ini/example.ini\" ); } Remarks The caller is responsible for ensuring that the parent directories of path exist.","title":"write"},{"location":"api/file/functions/write/#filewrite-function","text":"","title":"File::write Function"},{"location":"api/file/functions/write/#definition","text":"Namespace: ini Serializes the File instance and writes it to the specified file path.","title":"Definition"},{"location":"api/file/functions/write/#writeconst-stdfilesystempath","text":"Serializes the File instance and writes it to the specified file path. write(const std::filesystem::path&) inline void File :: write ( const std :: filesystem :: path & path ) const","title":"write(const std::filesystem::path&amp;)"},{"location":"api/file/functions/write/#parameters","text":"path std::filesystem::path The destination path.","title":"Parameters"},{"location":"api/file/functions/write/#examples","text":"The following example demonstrates how to serialize a File instance and write it to a file. main.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <fstream> #include \"ini.h\" int main ( int argc , char * argv []) { std :: ifstream stream ( \"path/to/ini/example.ini\" ); ini :: File file = ini :: load ( stream ); stream . close () ini :: Section & section = file [ \"Foo\" ]; section [ \"key1\" ] = \"value1\" ; section [ \"key2\" ] = \"value2\" ; file . write ( \"path/to/ini/example.ini\" ); }","title":"Examples"},{"location":"api/file/functions/write/#remarks","text":"The caller is responsible for ensuring that the parent directories of path exist.","title":"Remarks"},{"location":"api/file/operators/operator%5B%5D/","text":"File::operator[] Definition Namespace: ini Gets or sets a section that corresponds to the specified section name. operator[] inline Section & File :: operator []( const std :: string & section_name ) Parameters section_name std::string The section name that may exist in the File instance. Returns Section A reference to a section that corresponds to section_name . Exceptions std::invalid_argument section_name is empty. Examples The following example demonstrates how to retrieve a Section object from a File instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & database = file [ \"Database\" ] std :: cout << database [ \"server\" ] << std :: endl ; // 192.0.2.62 } 1 2 3 4 5 6 [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True Remarks If section_name does not exist in the File instance, it will be automatically created. For example, if you attempt to get a value that doesn't exist, that key will be added to the File .","title":"operator[]"},{"location":"api/file/operators/operator%5B%5D/#fileoperator","text":"","title":"File::operator[]"},{"location":"api/file/operators/operator%5B%5D/#definition","text":"Namespace: ini Gets or sets a section that corresponds to the specified section name. operator[] inline Section & File :: operator []( const std :: string & section_name )","title":"Definition"},{"location":"api/file/operators/operator%5B%5D/#parameters","text":"section_name std::string The section name that may exist in the File instance.","title":"Parameters"},{"location":"api/file/operators/operator%5B%5D/#returns","text":"Section A reference to a section that corresponds to section_name .","title":"Returns"},{"location":"api/file/operators/operator%5B%5D/#exceptions","text":"std::invalid_argument section_name is empty.","title":"Exceptions"},{"location":"api/file/operators/operator%5B%5D/#examples","text":"The following example demonstrates how to retrieve a Section object from a File instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & database = file [ \"Database\" ] std :: cout << database [ \"server\" ] << std :: endl ; // 192.0.2.62 } 1 2 3 4 5 6 [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True","title":"Examples"},{"location":"api/file/operators/operator%5B%5D/#remarks","text":"If section_name does not exist in the File instance, it will be automatically created. For example, if you attempt to get a value that doesn't exist, that key will be added to the File .","title":"Remarks"},{"location":"api/section/constructors/","text":"Section Constructors Definition Namespace: ini Initializes an instance of the Section class. Remarks These constructors are not intended to be used directly by the caller. Section() Initializes an instance of the Section class. Section() inline Section :: Section ()","title":"Constructors"},{"location":"api/section/constructors/#section-constructors","text":"","title":"Section Constructors"},{"location":"api/section/constructors/#definition","text":"Namespace: ini Initializes an instance of the Section class.","title":"Definition"},{"location":"api/section/constructors/#remarks","text":"These constructors are not intended to be used directly by the caller.","title":"Remarks"},{"location":"api/section/constructors/#section","text":"Initializes an instance of the Section class. Section() inline Section :: Section ()","title":"Section()"},{"location":"api/section/section/","text":"Section Class Definition Namespace: ini Represents a section of an INI file. Section class class Section Constructors Constructor Description Section() Initializes an instance of the Section class. Functions Name Description clear() Removes all keys from the Section instance. empty() Indicates whether the Section instance contains no keys. get<T>(const std::string&) Gets a value from the Section instance that is converted to the specified type before being returned. has_key(const std::string&) Indicates whether the Section instance contains a specified key. remove_key(const std::string&) Removes the specified key from the Section instance. rename_key(const std::string&, const std::string&) Renames the specified key in the Section instance. size() Returns the number of keys in the Section instance. set<T>(const std::string&, const T&) Sets the specified value in the Section instance based on the specified key and converts it to a string . Operators Name Description operator[] Gets or sets a value that corresponds to the specified key.","title":"Section"},{"location":"api/section/section/#section-class","text":"","title":"Section Class"},{"location":"api/section/section/#definition","text":"Namespace: ini Represents a section of an INI file. Section class class Section","title":"Definition"},{"location":"api/section/section/#constructors","text":"Constructor Description Section() Initializes an instance of the Section class.","title":"Constructors"},{"location":"api/section/section/#functions","text":"Name Description clear() Removes all keys from the Section instance. empty() Indicates whether the Section instance contains no keys. get<T>(const std::string&) Gets a value from the Section instance that is converted to the specified type before being returned. has_key(const std::string&) Indicates whether the Section instance contains a specified key. remove_key(const std::string&) Removes the specified key from the Section instance. rename_key(const std::string&, const std::string&) Renames the specified key in the Section instance. size() Returns the number of keys in the Section instance. set<T>(const std::string&, const T&) Sets the specified value in the Section instance based on the specified key and converts it to a string .","title":"Functions"},{"location":"api/section/section/#operators","text":"Name Description operator[] Gets or sets a value that corresponds to the specified key.","title":"Operators"},{"location":"api/section/functions/clear/","text":"Section::clear Function Definition Namespace: ini Removes all keys from the Section instance. clear() Removes all keys from the Section instance. clear() inline void Section :: clear () noexcept Examples The following example demonstrates how to remove all keys from a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); std :: cout << file [ \"user info\" ]. size () << std :: endl ; // 3 file [ \"user info\" ]. clear (); std :: cout << file [ \"user info\" ]. size () << std :: endl ; // 0 } 1 2 3 4 5 6 7 8 9 10 11 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres [user info] admin = John Appleseed login = finxter_freelancer password = freelancer_freedom","title":"clear"},{"location":"api/section/functions/clear/#sectionclear-function","text":"","title":"Section::clear Function"},{"location":"api/section/functions/clear/#definition","text":"Namespace: ini Removes all keys from the Section instance.","title":"Definition"},{"location":"api/section/functions/clear/#clear","text":"Removes all keys from the Section instance. clear() inline void Section :: clear () noexcept","title":"clear()"},{"location":"api/section/functions/clear/#examples","text":"The following example demonstrates how to remove all keys from a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); std :: cout << file [ \"user info\" ]. size () << std :: endl ; // 3 file [ \"user info\" ]. clear (); std :: cout << file [ \"user info\" ]. size () << std :: endl ; // 0 } 1 2 3 4 5 6 7 8 9 10 11 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres [user info] admin = John Appleseed login = finxter_freelancer password = freelancer_freedom","title":"Examples"},{"location":"api/section/functions/empty/","text":"Section::empty Function Definition Namespace: ini Indicates whether the Section instance contains no keys. empty() Indicates whether the Section instance contains no keys. empty() inline bool Section :: empty () const noexcept Returns bool true if the Section instance doesn't contain any keys; otherwise, false . Examples The following example demonstrates how to determine if a Section instance contains zero keys. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); std :: cout << file [ \"postgresql\" ]. empty () << std :: endl ; // 0 std :: cout << file [ \"user info\" ]. empty () << std :: endl ; // 1 } 1 2 3 4 5 6 7 8 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres [user info]","title":"empty"},{"location":"api/section/functions/empty/#sectionempty-function","text":"","title":"Section::empty Function"},{"location":"api/section/functions/empty/#definition","text":"Namespace: ini Indicates whether the Section instance contains no keys.","title":"Definition"},{"location":"api/section/functions/empty/#empty","text":"Indicates whether the Section instance contains no keys. empty() inline bool Section :: empty () const noexcept","title":"empty()"},{"location":"api/section/functions/empty/#returns","text":"bool true if the Section instance doesn't contain any keys; otherwise, false .","title":"Returns"},{"location":"api/section/functions/empty/#examples","text":"The following example demonstrates how to determine if a Section instance contains zero keys. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); std :: cout << file [ \"postgresql\" ]. empty () << std :: endl ; // 0 std :: cout << file [ \"user info\" ]. empty () << std :: endl ; // 1 } 1 2 3 4 5 6 7 8 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres [user info]","title":"Examples"},{"location":"api/section/functions/get/","text":"Section::get Function Definition Namespace: ini Gets a value from the Section instance that is converted to the specified type before being returned. get<T>(const std::string&) Gets a value from the Section instance that is converted to the specified type before being returned. get<T>(conststd::string&) template < typename T > inline T Section :: get ( const std :: string & key ) const Type Parameters T The type of the value to retrieve. Parameters key std::string The key of the value. Returns T A value of type T . Exceptions std::invalid_argument The type T is unsupported. Examples The following example demonstrates how to retrieve a value from a Section instance of a specified type. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); // bool bool isUp = file [ \"Database\" ]. get < bool > ( \"is_up\" ); if ( isUp ) { // ... } // int int port = file [ \"Database\" ]. get < int > ( \"port\" ); // double double pi = file [ \"Database\" ]. get < double > ( \"pi\" ); // size_t size_t timeout = file [ \"Database\" ]. get < size_t > ( \"timeout\" ); // std::string std :: string name = file [ \"Owner\" ][ \"name\" ] std :: string organization = file [ \"Owner\" ]. get < std :: string > ( \"organization\" ); std :: cout << \"name: \" << name << std :: endl // John Appleseed << \"organization: \" << organization << std :: endl ; // F.B. Widgets Inc. } 1 2 3 4 5 6 7 8 9 10 [Owner] name = John Appleseed organization = F.B. Widgets Inc. [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True Remarks Currently Supported Types The following is a list of types that are supported by the get function. bool int float double size_t std::size_t std::string std::string Although get supports std::string , the caller should opt to use the subscript operator instead. It's much simpler ( and more efficient ) to do: ini :: File file ; std :: string str = file [ \"Section\" ][ \"key\" ]; than: ini :: File file ; std :: string str = file [ \"Section\" ]. get < std :: string > ( \"key\" );","title":"get"},{"location":"api/section/functions/get/#sectionget-function","text":"","title":"Section::get Function"},{"location":"api/section/functions/get/#definition","text":"Namespace: ini Gets a value from the Section instance that is converted to the specified type before being returned.","title":"Definition"},{"location":"api/section/functions/get/#gettconst-stdstring","text":"Gets a value from the Section instance that is converted to the specified type before being returned. get<T>(conststd::string&) template < typename T > inline T Section :: get ( const std :: string & key ) const","title":"get&lt;T>(const std::string&amp;)"},{"location":"api/section/functions/get/#type-parameters","text":"T The type of the value to retrieve.","title":"Type Parameters"},{"location":"api/section/functions/get/#parameters","text":"key std::string The key of the value.","title":"Parameters"},{"location":"api/section/functions/get/#returns","text":"T A value of type T .","title":"Returns"},{"location":"api/section/functions/get/#exceptions","text":"std::invalid_argument The type T is unsupported.","title":"Exceptions"},{"location":"api/section/functions/get/#examples","text":"The following example demonstrates how to retrieve a value from a Section instance of a specified type. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); // bool bool isUp = file [ \"Database\" ]. get < bool > ( \"is_up\" ); if ( isUp ) { // ... } // int int port = file [ \"Database\" ]. get < int > ( \"port\" ); // double double pi = file [ \"Database\" ]. get < double > ( \"pi\" ); // size_t size_t timeout = file [ \"Database\" ]. get < size_t > ( \"timeout\" ); // std::string std :: string name = file [ \"Owner\" ][ \"name\" ] std :: string organization = file [ \"Owner\" ]. get < std :: string > ( \"organization\" ); std :: cout << \"name: \" << name << std :: endl // John Appleseed << \"organization: \" << organization << std :: endl ; // F.B. Widgets Inc. } 1 2 3 4 5 6 7 8 9 10 [Owner] name = John Appleseed organization = F.B. Widgets Inc. [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True","title":"Examples"},{"location":"api/section/functions/get/#remarks","text":"Currently Supported Types The following is a list of types that are supported by the get function. bool int float double size_t std::size_t std::string","title":"Remarks"},{"location":"api/section/functions/get/#stdstring","text":"Although get supports std::string , the caller should opt to use the subscript operator instead. It's much simpler ( and more efficient ) to do: ini :: File file ; std :: string str = file [ \"Section\" ][ \"key\" ]; than: ini :: File file ; std :: string str = file [ \"Section\" ]. get < std :: string > ( \"key\" );","title":"std::string"},{"location":"api/section/functions/has_key/","text":"Section::has_key Function Definition Namespace: ini Indicates whether the Section instance contains a specified key. has_key(const std::string&) Indicates whether the Section instance contains a specified key. has_key(const std::string&) inline bool Section :: has_key ( const std :: string & key ) const Parameters key std::string The name of the key. Returns bool true if key was found; otherwise, false . Examples The following example demonstrates how to check if a Section instance contains a specific key. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); bool foundKey = file [ \"postgresql\" ]. has_key ( \"container\" ); std :: cout << foundKey << std :: endl ; // 0 foundKey = file [ \"postgresql\" ]. has_key ( \"host\" ); std :: cout << foundKey << std :: endl ; // 1 } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"has_key"},{"location":"api/section/functions/has_key/#sectionhas_key-function","text":"","title":"Section::has_key Function"},{"location":"api/section/functions/has_key/#definition","text":"Namespace: ini Indicates whether the Section instance contains a specified key.","title":"Definition"},{"location":"api/section/functions/has_key/#has_keyconst-stdstring","text":"Indicates whether the Section instance contains a specified key. has_key(const std::string&) inline bool Section :: has_key ( const std :: string & key ) const","title":"has_key(const std::string&amp;)"},{"location":"api/section/functions/has_key/#parameters","text":"key std::string The name of the key.","title":"Parameters"},{"location":"api/section/functions/has_key/#returns","text":"bool true if key was found; otherwise, false .","title":"Returns"},{"location":"api/section/functions/has_key/#examples","text":"The following example demonstrates how to check if a Section instance contains a specific key. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); bool foundKey = file [ \"postgresql\" ]. has_key ( \"container\" ); std :: cout << foundKey << std :: endl ; // 0 foundKey = file [ \"postgresql\" ]. has_key ( \"host\" ); std :: cout << foundKey << std :: endl ; // 1 } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"Examples"},{"location":"api/section/functions/remove_key/","text":"Section::remove_key Function Definition Namespace: ini Removes the specified key from the Section instance. remove_key(const std::string&) Removes the specified key from the Section instance. remove_key(const std::string&) inline size_t Section :: remove_key ( const std :: string & key ) Parameters key std::string The name of the key to remove. Returns size_t The number of keys removed. Exceptions std::invalid_argument key does not exist. Examples The following example demonstrates how to remove a key from a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); // `section` must be a reference to a Section in order for // changes to be reflected in `file`. ini :: Section & section = file [ \"postgresql\" ]; std :: cout << section . size () << std :: endl ; // 5 size_t count = section . remove_key ( \"password\" ); std :: cout << section . size () << std :: endl ; // 4 std :: cout << \"count: \" << count << std :: endl ; // 1 } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"remove_key"},{"location":"api/section/functions/remove_key/#sectionremove_key-function","text":"","title":"Section::remove_key Function"},{"location":"api/section/functions/remove_key/#definition","text":"Namespace: ini Removes the specified key from the Section instance.","title":"Definition"},{"location":"api/section/functions/remove_key/#remove_keyconst-stdstring","text":"Removes the specified key from the Section instance. remove_key(const std::string&) inline size_t Section :: remove_key ( const std :: string & key )","title":"remove_key(const std::string&amp;)"},{"location":"api/section/functions/remove_key/#parameters","text":"key std::string The name of the key to remove.","title":"Parameters"},{"location":"api/section/functions/remove_key/#returns","text":"size_t The number of keys removed.","title":"Returns"},{"location":"api/section/functions/remove_key/#exceptions","text":"std::invalid_argument key does not exist.","title":"Exceptions"},{"location":"api/section/functions/remove_key/#examples","text":"The following example demonstrates how to remove a key from a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); // `section` must be a reference to a Section in order for // changes to be reflected in `file`. ini :: Section & section = file [ \"postgresql\" ]; std :: cout << section . size () << std :: endl ; // 5 size_t count = section . remove_key ( \"password\" ); std :: cout << section . size () << std :: endl ; // 4 std :: cout << \"count: \" << count << std :: endl ; // 1 } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"Examples"},{"location":"api/section/functions/rename_key/","text":"Section::rename_key Function Definition Namespace: ini Renames the specified key in the Section instance. rename_key(const std::string&, const std::string&) Renames the specified key in the Section instance. rename_key(const std::string&, const std::string& inline void Section :: rename_key ( const std :: string & old_key , const std :: string & new_key ) Parameters old_key std::string The key whose name will be replaced. new_key std::string The new name for the key. Exceptions std::invalid_argument old_key or new_key is empty. -or- old_key doesn't exist. -or- new_key already exists. Examples The following example demonstrates how to change the name of a key in a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & section = file [ \"postgresql\" ]; section . rename_key ( \"password\" , \"nothing to see here\" ); std :: cout << file [ \"postgresql\" ]. has_key ( \"password\" ) << std :: endl ; // 0 std :: cout << file [ \"postgresql\" ]. has_key ( \"nothing to see here\" ) << std :: endl ; // 1 std :: cout << file [ \"postgresql\" ][ \"nothing to see here\" ] << std :: endl ; // myfinxterpw } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"rename_key"},{"location":"api/section/functions/rename_key/#sectionrename_key-function","text":"","title":"Section::rename_key Function"},{"location":"api/section/functions/rename_key/#definition","text":"Namespace: ini Renames the specified key in the Section instance.","title":"Definition"},{"location":"api/section/functions/rename_key/#rename_keyconst-stdstring-const-stdstring","text":"Renames the specified key in the Section instance. rename_key(const std::string&, const std::string& inline void Section :: rename_key ( const std :: string & old_key , const std :: string & new_key )","title":"rename_key(const std::string&amp;, const std::string&amp;)"},{"location":"api/section/functions/rename_key/#parameters","text":"old_key std::string The key whose name will be replaced. new_key std::string The new name for the key.","title":"Parameters"},{"location":"api/section/functions/rename_key/#exceptions","text":"std::invalid_argument old_key or new_key is empty. -or- old_key doesn't exist. -or- new_key already exists.","title":"Exceptions"},{"location":"api/section/functions/rename_key/#examples","text":"The following example demonstrates how to change the name of a key in a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & section = file [ \"postgresql\" ]; section . rename_key ( \"password\" , \"nothing to see here\" ); std :: cout << file [ \"postgresql\" ]. has_key ( \"password\" ) << std :: endl ; // 0 std :: cout << file [ \"postgresql\" ]. has_key ( \"nothing to see here\" ) << std :: endl ; // 1 std :: cout << file [ \"postgresql\" ][ \"nothing to see here\" ] << std :: endl ; // myfinxterpw } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"Examples"},{"location":"api/section/functions/set/","text":"File::set Function Definition Namespace: ini Sets the specified value in the Section instance based on the specified key and converts it to a string . set<T>(const std::string&, const T&) Sets the specified value in the Section instance based on the specified key and converts it to a string . set<T>(const std::string&, const T&) template < typename T > inline void Section :: set ( const std :: string & key , const T & value ) Type Parameters T The type of the value that will be converted to a string and then inserted into the Section instance. Parameters key string The name of the key whose value will be set. Exceptions std::invalid_argument The type T is unsupported. Examples The following example demonstrates how to set the value of an existing key of a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); // bool file [ \"Database\" ]. set < bool > ( \"is_up\" , false ); // int int port = 144 ; file [ \"Database\" ]. set < int > ( \"port\" , port ); // std::string std :: string new_name = \"Johnny Appleseed\" ; file [ \"Owner\" ]. set < std :: string > ( \"name\" , new_name ); } 1 2 3 4 5 6 7 8 9 10 [Owner] name = John Appleseed organization = F.B. Widgets Inc. [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True The set function can also be used to create a key-value pair in a Section instance. Example 2 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); file [ \"Owner\" ]. set < std :: string > ( \"dob\" , \"Jan. 24, 1984\" ); std :: cout << file [ \"Owner\" ][ \"dob\" ] << std :: endl ; // Jan. 24, 1984 } 1 2 3 4 5 6 7 8 9 10 [Owner] name = John Appleseed organization = F.B. Widgets Inc. [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True Remarks Currently Supported Types The following is a list of types that are supported by the get function. bool int float double size_t std::size_t std::string","title":"set"},{"location":"api/section/functions/set/#fileset-function","text":"","title":"File::set Function"},{"location":"api/section/functions/set/#definition","text":"Namespace: ini Sets the specified value in the Section instance based on the specified key and converts it to a string .","title":"Definition"},{"location":"api/section/functions/set/#settconst-stdstring-const-t","text":"Sets the specified value in the Section instance based on the specified key and converts it to a string . set<T>(const std::string&, const T&) template < typename T > inline void Section :: set ( const std :: string & key , const T & value )","title":"set&lt;T>(const std::string&amp;, const T&amp;)"},{"location":"api/section/functions/set/#type-parameters","text":"T The type of the value that will be converted to a string and then inserted into the Section instance.","title":"Type Parameters"},{"location":"api/section/functions/set/#parameters","text":"key string The name of the key whose value will be set.","title":"Parameters"},{"location":"api/section/functions/set/#exceptions","text":"std::invalid_argument The type T is unsupported.","title":"Exceptions"},{"location":"api/section/functions/set/#examples","text":"The following example demonstrates how to set the value of an existing key of a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); // bool file [ \"Database\" ]. set < bool > ( \"is_up\" , false ); // int int port = 144 ; file [ \"Database\" ]. set < int > ( \"port\" , port ); // std::string std :: string new_name = \"Johnny Appleseed\" ; file [ \"Owner\" ]. set < std :: string > ( \"name\" , new_name ); } 1 2 3 4 5 6 7 8 9 10 [Owner] name = John Appleseed organization = F.B. Widgets Inc. [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True The set function can also be used to create a key-value pair in a Section instance. Example 2 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); file [ \"Owner\" ]. set < std :: string > ( \"dob\" , \"Jan. 24, 1984\" ); std :: cout << file [ \"Owner\" ][ \"dob\" ] << std :: endl ; // Jan. 24, 1984 } 1 2 3 4 5 6 7 8 9 10 [Owner] name = John Appleseed organization = F.B. Widgets Inc. [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True","title":"Examples"},{"location":"api/section/functions/set/#remarks","text":"Currently Supported Types The following is a list of types that are supported by the get function. bool int float double size_t std::size_t std::string","title":"Remarks"},{"location":"api/section/functions/size/","text":"Section::size Function Definition Namespace: ini Returns the number of keys in the Section instance. size() Returns the number of keys in the Section instance. size() size_t Section :: size () const noexcept Returns size_t The number of keys in the Section instance. Examples The following example demonstrates how to determine the number of keys in a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); std :: cout << file [ \"postgresql\" ]. size () << std :: endl ; // 5 } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"size"},{"location":"api/section/functions/size/#sectionsize-function","text":"","title":"Section::size Function"},{"location":"api/section/functions/size/#definition","text":"Namespace: ini Returns the number of keys in the Section instance.","title":"Definition"},{"location":"api/section/functions/size/#size","text":"Returns the number of keys in the Section instance. size() size_t Section :: size () const noexcept","title":"size()"},{"location":"api/section/functions/size/#returns","text":"size_t The number of keys in the Section instance.","title":"Returns"},{"location":"api/section/functions/size/#examples","text":"The following example demonstrates how to determine the number of keys in a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 #include <iostream> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); std :: cout << file [ \"postgresql\" ]. size () << std :: endl ; // 5 } 1 2 3 4 5 6 [postgresql] host = localhost user = finxter1 port = 5543 password = myfinxterpw db = postgres","title":"Examples"},{"location":"api/section/operators/operator%5B%5D/","text":"Section::operator[] Definition Namespace: ini Gets or sets a value that corresponds to the specified key. operator[] inline std :: string & Section :: operator []( const std :: string & key ) Parameters key std::string The key that may exist in the Section instance. Returns std::string A reference to a string that corresponds to key . Exceptions std::invalid_argument key is empty. Examples The following example demonstrates how to retrieve a value from a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & database = file [ \"Database\" ] std :: cout << database [ \"server\" ] << std :: endl ; // 192.0.2.62 std :: cout << database [ \"port\" ] << std :: endl ; // 143 std :: cout << database [ \"timeout\" ] << std :: endl ; // 10000 std :: cout << database [ \"pi\" ] << std :: endl ; // 3.14159265359 std :: cout << database [ \"is_up\" ] << std :: endl ; // True // Assigns the value to a string. std :: string server = file [ \"Section\" ][ \"server\" ]; std :: cout << server << std :: endl ; // 192.0.2.62 } 1 2 3 4 5 6 [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True Additionally, operator[] can be used to set values. Example 2 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & database = file [ \"Section\" ]; // Changes value. database [ \"port\" ] = \"144\" ; // Creates new key-value pair. database [ \"is_down\" ] = \"False\" ; std :: cout << file [ \"Section\" ][ \"is_down\" ] << std :: endl ; // False } 1 2 3 4 5 6 [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True Remarks If key does not exist in the Section instance, it will be automatically created. For example, if you attempt to get a value that doesn't exist, that key will be added to the Section .","title":"operator[]"},{"location":"api/section/operators/operator%5B%5D/#sectionoperator","text":"","title":"Section::operator[]"},{"location":"api/section/operators/operator%5B%5D/#definition","text":"Namespace: ini Gets or sets a value that corresponds to the specified key. operator[] inline std :: string & Section :: operator []( const std :: string & key )","title":"Definition"},{"location":"api/section/operators/operator%5B%5D/#parameters","text":"key std::string The key that may exist in the Section instance.","title":"Parameters"},{"location":"api/section/operators/operator%5B%5D/#returns","text":"std::string A reference to a string that corresponds to key .","title":"Returns"},{"location":"api/section/operators/operator%5B%5D/#exceptions","text":"std::invalid_argument key is empty.","title":"Exceptions"},{"location":"api/section/operators/operator%5B%5D/#examples","text":"The following example demonstrates how to retrieve a value from a Section instance. Example 1 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & database = file [ \"Database\" ] std :: cout << database [ \"server\" ] << std :: endl ; // 192.0.2.62 std :: cout << database [ \"port\" ] << std :: endl ; // 143 std :: cout << database [ \"timeout\" ] << std :: endl ; // 10000 std :: cout << database [ \"pi\" ] << std :: endl ; // 3.14159265359 std :: cout << database [ \"is_up\" ] << std :: endl ; // True // Assigns the value to a string. std :: string server = file [ \"Section\" ][ \"server\" ]; std :: cout << server << std :: endl ; // 192.0.2.62 } 1 2 3 4 5 6 [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True Additionally, operator[] can be used to set values. Example 2 main.cpp example.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <string> #include \"ini.h\" int main ( int argc , char * argv []) { ini :: File file = ini :: open ( \"example.ini\" ); ini :: Section & database = file [ \"Section\" ]; // Changes value. database [ \"port\" ] = \"144\" ; // Creates new key-value pair. database [ \"is_down\" ] = \"False\" ; std :: cout << file [ \"Section\" ][ \"is_down\" ] << std :: endl ; // False } 1 2 3 4 5 6 [Database] server = 192.0.2.62 port = 143 timeout = 10000 pi = 3.14159265359 is_up = True","title":"Examples"},{"location":"api/section/operators/operator%5B%5D/#remarks","text":"If key does not exist in the Section instance, it will be automatically created. For example, if you attempt to get a value that doesn't exist, that key will be added to the Section .","title":"Remarks"}]}